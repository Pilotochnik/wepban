#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
–ó–∞–ø—É—Å–∫–∞—Ç—å: python check_system.py
"""

import asyncio
import httpx
import json
import os
import sys
import subprocess
from pathlib import Path

class SystemChecker:
    def __init__(self):
        self.backend_url = "http://127.0.0.1:8000"
        self.creator_id = 434532312
        self.issues = []
        self.fixes = []
        
    async def run_full_check(self):
        """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
        print("=" * 60)
        
        checks = [
            ("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", self.check_file_structure),
            ("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ backend", self.check_backend),
            ("üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è", self.check_creator),
            ("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", self.check_database),
            ("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", self.check_auth),
            ("üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints", self.check_api_endpoints),
            ("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ bot –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", self.check_bot_config),
            ("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend", self.check_frontend),
        ]
        
        for check_name, check_func in checks:
            print(f"\n{check_name}")
            print("-" * 40)
            try:
                await check_func()
                print(f"‚úÖ {check_name}: OK")
            except Exception as e:
                print(f"‚ùå {check_name}: {e}")
                self.issues.append(f"{check_name}: {e}")
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        self.suggest_fixes()
        
        return len(self.issues) == 0
    
    async def check_file_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        required_dirs = ["backend", "bot", "frontend"]
        required_files = [
            "backend/main.py",
            "backend/.env",
            "bot/main.py", 
            "bot/.env",
            "frontend/package.json",
            ".env"
        ]
        
        for dir_name in required_dirs:
            if not Path(dir_name).exists():
                raise Exception(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
        
        for file_name in required_files:
            if not Path(file_name).exists():
                raise Exception(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {file_name}")
    
    async def check_backend(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ backend"""
        try:
            async with httpx.AsyncClient(timeout=5.0) as client:
                response = await client.get(f"{self.backend_url}/health")
                if response.status_code != 200:
                    raise Exception(f"Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except httpx.ConnectError:
            raise Exception("Backend –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd backend && python main.py")
    
    async def check_creator(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è"""
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(f"{self.backend_url}/api/v1/users/check-access/{self.creator_id}")
            
            if response.status_code != 200:
                raise Exception("–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python backend/init_creator.py")
            
            user_data = response.json()
            if not user_data.get('is_active'):
                raise Exception("–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python backend/init_creator.py")
            
            if user_data.get('role') != 'creator':
                raise Exception("–†–æ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    async def check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        async with httpx.AsyncClient(timeout=10.0) as client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
            response = await client.get(f"{self.backend_url}/api/v1/users/check-access/{self.creator_id}")
            if response.status_code != 200:
                raise Exception("–ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö - —Å–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            user_data = response.json()
            if not user_data:
                raise Exception("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
    
    async def check_auth(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                f"{self.backend_url}/api/v1/users/auth",
                json={"telegram_id": self.creator_id}
            )
            
            if response.status_code != 200:
                raise Exception(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            
            auth_data = response.json()
            if not auth_data.get("access_token"):
                raise Exception("–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
    
    async def check_api_endpoints(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints"""
        async with httpx.AsyncClient(timeout=10.0) as client:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            auth_response = await client.post(
                f"{self.backend_url}/api/v1/users/auth",
                json={"telegram_id": self.creator_id}
            )
            
            if auth_response.status_code != 200:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            
            token = auth_response.json()["access_token"]
            headers = {"Authorization": f"Bearer {token}"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
            endpoints = [
                ("/api/v1/projects/", "–ü—Ä–æ–µ–∫—Ç—ã"),
                ("/api/v1/tasks/", "–ó–∞–¥–∞—á–∏"),
                ("/api/v1/admin/users", "–ê–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
                ("/api/v1/admin/stats", "–ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            ]
            
            for endpoint, name in endpoints:
                response = await client.get(f"{self.backend_url}{endpoint}", headers=headers)
                if response.status_code not in [200, 404]:  # 404 –¥–æ–ø—É—Å—Ç–∏–º–æ –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤
                    raise Exception(f"–û—à–∏–±–∫–∞ {name}: {response.status_code}")
    
    async def check_bot_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        bot_env = Path("bot/.env")
        if not bot_env.exists():
            raise Exception("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç bot/.env —Ñ–∞–π–ª")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env
        with open(bot_env, 'r', encoding='utf-8') as f:
            content = f.read()
            
        required_vars = ["BOT_TOKEN", "BACKEND_URL", "OPENAI_API_KEY"]
        for var in required_vars:
            if f"{var}=" not in content or f"{var}=" in content and not content.split(f"{var}=")[1].split('\n')[0].strip():
                raise Exception(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ bot/.env")
    
    async def check_frontend(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ frontend"""
        frontend_dir = Path("frontend")
        if not frontend_dir.exists():
            raise Exception("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        package_json = frontend_dir / "package.json"
        if not package_json.exists():
            raise Exception("package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ frontend")
        
        node_modules = frontend_dir / "node_modules"
        if not node_modules.exists():
            raise Exception("node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd frontend && npm install")
    
    def suggest_fixes(self):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º"""
        if not self.issues:
            print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            return
        
        print(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û –ü–†–û–ë–õ–ï–ú: {len(self.issues)}")
        print("=" * 60)
        
        for i, issue in enumerate(self.issues, 1):
            print(f"{i}. {issue}")
        
        print("\nüîß –ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("=" * 60)
        
        if any("Backend –Ω–µ –∑–∞–ø—É—â–µ–Ω" in issue for issue in self.issues):
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend:")
            print("   cd backend")
            print("   python main.py")
        
        if any("–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" in issue or "–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω" in issue for issue in self.issues):
            print("2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è:")
            print("   cd backend")
            print("   python init_creator.py")
        
        if any(".env" in issue for issue in self.issues):
            print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª—ã:")
            print("   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env –≤ backend/ –∏ bot/")
            print("   - –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        
        if any("node_modules" in issue for issue in self.issues):
            print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ frontend:")
            print("   cd frontend")
            print("   npm install")
        
        if any("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" in issue for issue in self.issues):
            print("5. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")
            print("   cd backend")
            print("   python init_creator.py")
        
        print("\nüöÄ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ü–£–°–¢–ò–¢–ï:")
        print("1. Backend: cd backend && python main.py")
        print("2. Bot: cd bot && python main.py")
        print("3. Frontend: cd frontend && npm start")
        print("4. –¢–µ—Å—Ç: python test_access_quick.py")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = SystemChecker()
    
    print("üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
    print("–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...\n")
    
    success = await checker.run_full_check()
    
    if success:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê!")
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("   - Backend: cd backend && python main.py")
        print("   - Bot: cd bot && python main.py") 
        print("   - Frontend: cd frontend && npm start")
        print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É —Å ID 434532312")
        print("3. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: python test_role_system.py")
    else:
        print("\n‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø!")
        print("–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.")

if __name__ == "__main__":
    asyncio.run(main())
