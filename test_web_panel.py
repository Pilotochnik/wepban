#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–µ–±-–ø–∞–Ω–µ–ª–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–µ–±-–ø–∞–Ω–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ
"""

import asyncio
import httpx
import json

class WebPanelTester:
    def __init__(self):
        self.base_url = "http://127.0.0.1:8000"
        self.telegram_id = 434532312
        self.token = None
        
    async def authenticate(self) -> str:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{self.base_url}/api/v1/users/auth",
                json={"telegram_id": self.telegram_id}
            )
            response.raise_for_status()
            data = response.json()
            self.token = data["access_token"]
            return self.token
    
    async def test_projects_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–µ–∫—Ç–æ–≤:")
        print("=" * 50)
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        print("üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
        await self.authenticate()
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {self.token[:20]}...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        async with httpx.AsyncClient() as client:
            headers = {"Authorization": f"Bearer {self.token}"}
            response = await client.get(f"{self.base_url}/api/v1/projects/", headers=headers)
            
            if response.status_code == 200:
                projects = response.json()
                print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(projects)}")
                for project in projects:
                    print(f"   - {project['name']} (ID: {project['id']})")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        print("\n‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...")
        new_project = {
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ –≤–µ–±-–ø–∞–Ω–µ–ª–∏",
            "description": "–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–ø–∞–Ω–µ–ª–∏",
            "color": "#FF6B6B"
        }
        
        async with httpx.AsyncClient() as client:
            headers = {"Authorization": f"Bearer {self.token}"}
            response = await client.post(
                f"{self.base_url}/api/v1/projects/",
                headers=headers,
                json=new_project
            )
            
            if response.status_code == 200:
                created_project = response.json()
                print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {created_project['name']} (ID: {created_project['id']})")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
        print("\nüìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
        async with httpx.AsyncClient() as client:
            headers = {"Authorization": f"Bearer {self.token}"}
            response = await client.get(f"{self.base_url}/api/v1/tasks/", headers=headers)
            
            if response.status_code == 200:
                tasks = response.json()
                print(f"‚úÖ –ó–∞–¥–∞—á –ø–æ–ª—É—á–µ–Ω–æ: {len(tasks)}")
                for task in tasks[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    print(f"   - {task['title']} (ID: {task['id']})")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
    
    async def test_cors(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –¥–ª—è –≤–µ–±-–ø–∞–Ω–µ–ª–∏"""
        print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS:")
        print("=" * 50)
        
        async with httpx.AsyncClient() as client:
            # –¢–µ—Å—Ç OPTIONS –∑–∞–ø—Ä–æ—Å–∞
            response = await client.options(f"{self.base_url}/api/v1/projects/")
            print(f"OPTIONS –∑–∞–ø—Ä–æ—Å: {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ CORS
            cors_headers = {
                "Access-Control-Allow-Origin": response.headers.get("access-control-allow-origin"),
                "Access-Control-Allow-Methods": response.headers.get("access-control-allow-methods"),
                "Access-Control-Allow-Headers": response.headers.get("access-control-allow-headers"),
            }
            
            print("CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏:")
            for header, value in cors_headers.items():
                print(f"   {header}: {value}")

async def main():
    tester = WebPanelTester()
    
    print("üöÄ –¢–µ—Å—Ç –≤–µ–±-–ø–∞–Ω–µ–ª–∏ Project Manager")
    print("=" * 50)
    
    try:
        await tester.test_projects_api()
        await tester.test_cors()
        
        print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("1. –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ frontend")
        print("2. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ API - –ø—Ä–æ–±–ª–µ–º–∞ –≤ backend")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ http://localhost:3000")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
