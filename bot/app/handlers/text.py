import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from app.services.ai import AIAssistant
from app.services.api import APIService

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text & ~F.text.startswith('/'))
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á (–∏—Å–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã)"""
    logger.info(f"TEXT HANDLER: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    print(f"TEXT HANDLER: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
        
    logger.info(f"TEXT HANDLER: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    print(f"TEXT HANDLER: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        ai_service = AIAssistant()
        api_service = APIService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_keywords = ['—Å–æ–∑–¥–∞–π', '–¥–æ–±–∞–≤—å', '–¥–æ–±–∞–≤–∏—Ç—å', '–∑–∞–¥–∞—á–∞', '–∑–∞–¥–∞—á–∏', 'todo', 'task']
        message_text = message.text.lower()
        
        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤: {message_text}")
        print(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {task_keywords}")
        
        if any(keyword in message_text for keyword in task_keywords):
            print("–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É...")
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {message.text}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
            try:
                user_projects = await api_service.get_user_projects(message.from_user.id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã: {e}")
                user_projects = []  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            task_data = await ai_service.analyze_text_request(message.text, user_projects)
            
            logger.info(f"AI –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {task_data}")
            print(f"AI –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {task_data}")
            
            if task_data.get("status") == "not_task":
                await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ: \"–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\"")
            else:
                # AI –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞–ø—Ä—è–º—É—é
                logger.info("–°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API...")
                print("–°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API...")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
                if "task" in task_data:
                    task_payload = task_data["task"]
                else:
                    task_payload = task_data
                
                print(f"Sending task payload: {task_payload}")
                created_task = await api_service.create_task(task_payload, message.from_user.id)
                
                if created_task:
                    await message.answer(
                        f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {created_task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {created_task.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                        f"üìÖ –°—Ç–∞—Ç—É—Å: {created_task.get('status', '–ù–æ–≤–∞—è')}\n"
                        f"üè∑Ô∏è –ü—Ä–æ–µ–∫—Ç: {created_task.get('project_name', '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞')}"
                    )
                    logger.info(f"–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {created_task}")
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã.")
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API")
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –æ—Ç–≤–µ—á–∞–µ–º –æ–±—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(
                "ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:\n"
                "‚Ä¢ \"–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\"\n"
                "‚Ä¢ \"–î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É: –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É\"\n"
                "‚Ä¢ \"–ó–∞–¥–∞—á–∞: –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é\""
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
