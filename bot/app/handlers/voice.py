from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
import tempfile
import os
from app.services.api import APIService
from app.services.ai import AIAssistant

router = Router()


@router.message(F.content_type == "voice")
async def handle_voice_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    print(f"VOICE HANDLER: –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    processing_msg = await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    try:
        print("VOICE HANDLER: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice = message.voice
        print(f"VOICE HANDLER: –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª voice: {voice.file_id}")
        
        file = await message.bot.get_file(voice.file_id)
        print(f"VOICE HANDLER: –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {file.file_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file_path = tempfile.mktemp(suffix=".oga")
        print(f"VOICE HANDLER: –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤: {temp_file_path}")
        
        try:
            # –í Aiogram 3.x –∏—Å–ø–æ–ª—å–∑—É–µ–º bot.download_file
            await message.bot.download_file(file.file_path, temp_file_path)
            print(f"VOICE HANDLER: –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {temp_file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if os.path.exists(temp_file_path) and os.path.getsize(temp_file_path) > 0:
                print(f"VOICE HANDLER: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(temp_file_path)} –±–∞–π—Ç")
            else:
                print("VOICE HANDLER: –û–®–ò–ë–ö–ê - —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π!")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
                
        except Exception as e:
            print(f"VOICE HANDLER: –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
        ai_assistant = AIAssistant()
        api_service = APIService()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("VOICE HANDLER: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        projects = await api_service.get_user_projects(message.from_user.id)
        projects_info = [{"id": p["id"], "name": p["name"]} for p in projects]
        print(f"VOICE HANDLER: –ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(projects)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print("VOICE HANDLER: –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑...")
        result = await ai_assistant.process_voice_message(temp_file_path, projects_info)
        print(f"VOICE HANDLER: AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        if result["status"] == "questions_needed":
            # –ù—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è
            questions_text = "‚ùì –ú–Ω–µ –Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è:\n\n"
            for i, question in enumerate(result["questions"], 1):
                questions_text += f"{i}. {question}\n"
            
            questions_text += f"\nüìù <b>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –∑–∞–¥–∞—á–∞:</b>\n"
            questions_text += f"‚Ä¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {result['suggested_task']['title']}\n"
            questions_text += f"‚Ä¢ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {result['suggested_task']['description']}\n"
            questions_text += f"‚Ä¢ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {result['suggested_task']['priority']}\n"
            
            questions_text += f"\nüé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n{result['original_text']}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"create_task_without_questions:{result['task_data']}")],
                [InlineKeyboardButton(text="‚úèÔ∏è –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data="clarify_details")]
            ])
            
            await processing_msg.edit_text(questions_text, reply_markup=keyboard)
        
        elif result["status"] == "task_created":
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API
            print("VOICE HANDLER: –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API...")
            task_data = result["task"]
            created_task = await api_service.create_task(task_data, message.from_user.id)
            
            if created_task:
                print(f"VOICE HANDLER: –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {created_task}")
                # –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞
                task = created_task
                success_text = f"‚úÖ <b>–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                success_text += f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
                success_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
                success_text += f"‚ö° <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {task['priority']}\n"
                if task.get('deadline'):
                    from datetime import datetime
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
                        deadline = datetime.fromisoformat(task['deadline'].replace('Z', '+00:00'))
                        formatted_deadline = deadline.strftime('%d.%m.%Y %H:%M')
                        success_text += f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {formatted_deadline}\n"
                    except:
                        success_text += f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {task['deadline']}\n"
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                project_name = "–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞"
                if task.get('project_id'):
                    project = next((p for p in projects if p["id"] == task["project_id"]), None)
                    if project:
                        project_name = project["name"]
                success_text += f"üìÇ <b>–ü—Ä–æ–µ–∫—Ç:</b> {project_name}\n"
                
                success_text += f"\nüé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n{result['original_text']}"
                
                print(f"VOICE HANDLER: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
                print(f"VOICE HANDLER: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {success_text}")
                
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await processing_msg.edit_text(success_text)
                    print("VOICE HANDLER: –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                except Exception as e:
                    print(f"VOICE HANDLER: –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    try:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await message.answer(success_text)
                        print("VOICE HANDLER: –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                    except Exception as e2:
                        print(f"VOICE HANDLER: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e2}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
            else:
                print("VOICE HANDLER: –ó–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        else:
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    except Exception as e:
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if 'temp_file_path' in locals() and os.path.exists(temp_file_path):
            os.unlink(temp_file_path)


@router.callback_query(F.data.startswith("create_task_without_questions:"))
async def create_task_without_questions(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–æ—á–Ω–µ–Ω–∏–π"""
    
    await callback.answer("‚è≥ –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É...")
    
    try:
        import json
        task_data = json.loads(callback.data.split(":", 1)[1])
        
        api_service = APIService()
        result = await api_service.create_task_from_ai_data(callback.from_user.id, task_data)
        
        if result["status"] == "success":
            task = result["task"]
            success_text = f"‚úÖ <b>–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            success_text += f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
            success_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
            success_text += f"‚ö° <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {task['priority']}\n"
            
            if task.get('deadline'):
                success_text += f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {task['deadline']}\n"
            if task.get('project'):
                success_text += f"üìÇ <b>–ü—Ä–æ–µ–∫—Ç:</b> {task['project']['name']}\n"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app={"url": f"{api_service.WEBAPP_URL}"})]
            ])
            
            await callback.message.edit_text(success_text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {result.get('error')}")
    
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "clarify_details")
async def clarify_details(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π"""
    
    clarification_text = """‚úèÔ∏è <b>–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏:</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:

üìÇ <b>–ü—Ä–æ–µ–∫—Ç:</b> –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–¥–æ –∑–∞–≤—Ç—Ä–∞", "–∫ –ø—è—Ç–Ω–∏—Ü–µ")
üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> –ö–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É
‚ö° <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> –í–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏

–ü—Ä–∏–º–µ—Ä:
"–ü—Ä–æ–µ–∫—Ç: –û—Ñ–∏—Å, –¥–µ–¥–ª–∞–π–Ω: –¥–æ –ø—è—Ç–Ω–∏—Ü—ã, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤—ã—Å–æ–∫–∏–π"

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —É—Ç–æ—á–Ω—è—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º."""
    
    await callback.message.edit_text(clarification_text)
    await callback.answer()
