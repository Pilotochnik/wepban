import logging
import httpx
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from app.services.api import APIService
from typing import Dict, Any

router = Router()
logger = logging.getLogger(__name__)

def is_creator(user_data: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º"""
    return user_data.get('role') == 'creator'

@router.message(Command("admin"))
async def cmd_admin(message: Message, user_data: Dict[str, Any] = None):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è"""
    if not is_creator(user_data):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return
    
    api_service = APIService()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        auth_data = await api_service.authenticate_user(message.from_user.id)
        token = auth_data["access_token"]
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            headers = {"Authorization": f"Bearer {token}"}
            response = await client.get(f"{api_service.base_url}/api/v1/admin/stats", headers=headers)
            response.raise_for_status()
            stats = response.json()
        
        text = "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n"
        text += f"üë∑ –ü—Ä–æ—Ä–∞–±–æ–≤: {stats['foremen_count']}\n"
        text += f"üî® –†–∞–±–æ—á–∏—Ö: {stats['workers_count']}\n"
        text += f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è: {stats['pending_approvals']}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
            [InlineKeyboardButton(text="‚è≥ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ", callback_data="admin_approvals")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user")],
            [InlineKeyboardButton(text="üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_refresh")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@router.callback_query(F.data == "admin_refresh")
async def admin_refresh(callback: CallbackQuery, user_data: Dict[str, Any] = None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_creator(user_data):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await cmd_admin(callback.message, user_data)
    await callback.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery, user_data: Dict[str, Any] = None):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_creator(user_data):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    api_service = APIService()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        auth_data = await api_service.authenticate_user(callback.from_user.id)
        token = auth_data["access_token"]
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            headers = {"Authorization": f"Bearer {token}"}
            response = await client.get(f"{api_service.base_url}/api/v1/admin/users", headers=headers)
            response.raise_for_status()
            users = response.json()
        
        text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        
        for user in users:
            status = "‚úÖ" if user['is_active'] else "‚ùå"
            role_emoji = {
                'creator': 'üëë',
                'foreman': 'üë∑',
                'worker': 'üî®',
                'viewer': 'üëÅÔ∏è'
            }.get(user['role'], '‚ùì')
            
            text += f"{status} {role_emoji} <b>{user['first_name']} {user['last_name']}</b>\n"
            text += f"   ID: {user['telegram_id']} | –†–æ–ª—å: {user['role']}\n"
            text += f"   Username: @{user['username']}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

@router.callback_query(F.data == "admin_approvals")
async def admin_approvals(callback: CallbackQuery, user_data: Dict[str, Any] = None):
    """–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ"""
    if not is_creator(user_data):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    api_service = APIService()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
        auth_data = await api_service.authenticate_user(callback.from_user.id)
        token = auth_data["access_token"]
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            headers = {"Authorization": f"Bearer {token}"}
            response = await client.get(f"{api_service.base_url}/api/v1/admin/approvals/pending", headers=headers)
            response.raise_for_status()
            approvals = response.json()
        
        if not approvals:
            text = "‚è≥ <b>–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ</b>\n\n–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        else:
            text = "‚è≥ <b>–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ</b>\n\n"
            keyboard_buttons = []
            
            for approval in approvals:
                text += f"üìã <b>–ó–∞–ø—Ä–æ—Å #{approval['id']}</b>\n"
                text += f"–û—Ç: {approval['requester']['first_name']} {approval['requester']['last_name']}\n"
                text += f"–î–µ–π—Å—Ç–≤–∏–µ: {approval['action_type']}\n"
                text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {approval['description']}\n\n"
                
                keyboard_buttons.append([
                    InlineKeyboardButton(text=f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å #{approval['id']}", callback_data=f"approve:{approval['id']}"),
                    InlineKeyboardButton(text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #{approval['id']}", callback_data=f"reject:{approval['id']}")
                ])
            
            keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {str(e)}")

@router.callback_query(F.data == "admin_add_user")
async def admin_add_user(callback: CallbackQuery, user_data: Dict[str, Any] = None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_creator(user_data):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    text = "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
    text += "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    text += "<code>/add_user telegram_id:123456789 role:foreman first_name:–ò–≤–∞–Ω last_name:–ü–µ—Ç—Ä–æ–≤ username:ivan_petrov</code>\n\n"
    text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:\n"
    text += "‚Ä¢ <code>foreman</code> - –ü—Ä–æ—Ä–∞–±\n"
    text += "‚Ä¢ <code>worker</code> - –†–∞–±–æ—á–∏–π\n"
    text += "‚Ä¢ <code>viewer</code> - –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery, user_data: Dict[str, Any] = None):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    await cmd_admin(callback.message, user_data)

@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: CallbackQuery, user_data: Dict[str, Any] = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await cmd_admin(callback.message, user_data)
    await callback.answer()

@router.message(Command("add_user"))
async def cmd_add_user(message: Message, user_data: Dict[str, Any] = None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    if not is_creator(user_data):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    args = message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º /add_user
    user_data_dict = {}
    
    for arg in args:
        if ':' in arg:
            key, value = arg.split(':', 1)
            user_data_dict[key] = value
    
    required_fields = ['telegram_id', 'role', 'first_name', 'last_name']
    missing_fields = [field for field in required_fields if field not in user_data_dict]
    
    if missing_fields:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_fields)}")
        return
    
    api_service = APIService()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—è
        auth_data = await api_service.authenticate_user(message.from_user.id)
        token = auth_data["access_token"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_create_data = {
            'telegram_id': int(user_data_dict['telegram_id']),
            'role': user_data_dict['role'],
            'first_name': user_data_dict['first_name'],
            'last_name': user_data_dict['last_name'],
            'username': user_data_dict.get('username', ''),
            'is_active': True
        }
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            headers = {"Authorization": f"Bearer {token}"}
            response = await client.post(f"{api_service.base_url}/api/v1/admin/users", json=user_create_data, headers=headers)
            response.raise_for_status()
            new_user = response.json()
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                           f"üë§ {new_user['first_name']} {new_user['last_name']}\n"
                           f"üÜî ID: {new_user['telegram_id']}\n"
                           f"üé≠ –†–æ–ª—å: {new_user['role']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
