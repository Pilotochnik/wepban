import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from app.services.api import APIService
from app.services.ai import AIAssistant

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data.startswith("create_task_without_questions:"))
async def create_task_without_questions(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
        task_data_str = callback.data.split(":", 1)[1]
        import json
        task_data = json.loads(task_data_str)
        
        print(f"CALLBACK: –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É: {task_data}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API
        api_service = APIService()
        created_task = await api_service.create_task(task_data, callback.from_user.id)
        
        if created_task:
            success_text = f"‚úÖ <b>–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            success_text += f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {created_task['title']}\n"
            success_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {created_task['description']}\n"
            success_text += f"‚ö° <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {created_task['priority']}\n"
            
            if created_task.get('deadline'):
                success_text += f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {created_task['deadline']}\n"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app={"url": f"{api_service.WEBAPP_URL}"})]
            ])
            
            await callback.message.edit_text(success_text, reply_markup=keyboard)
            await callback.answer("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!")
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ callback: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        await callback.answer("–û—à–∏–±–∫–∞")

@router.callback_query(F.data == "clarify_details")
async def clarify_details(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π"""
    try:
        await callback.message.edit_text(
            "‚úèÔ∏è <b>–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:\n"
            "‚Ä¢ –î–µ–¥–ª–∞–π–Ω (–∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å)\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–≤–∞–∂–Ω–æ/–Ω–µ –≤–∞–∂–Ω–æ)\n"
            "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        )
        await callback.answer("–û–∂–∏–¥–∞—é —É—Ç–æ—á–Ω–µ–Ω–∏—è...")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")

@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = """üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

üé§ <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:
"–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –¥–æ –∑–∞–≤—Ç—Ä–∞"

üìù <b>–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:
‚Ä¢ "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É"
‚Ä¢ "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É" 
‚Ä¢ "–∑–∞–¥–∞—á–∞"

üì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ - –æ–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –∑–∞–¥–∞—á–µ

üöÄ <b>–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏"""
    
    await callback.message.edit_text(help_text)
    await callback.answer("–ü–æ–º–æ—â—å")


@router.callback_query(F.data.startswith("approve:"))
async def approve_request(callback: CallbackQuery):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫—É"""
    approval_id = int(callback.data.split(":")[1])
    
    await callback.answer("‚è≥ –û–¥–æ–±—Ä—è—é –∑–∞–ø—Ä–æ—Å...")
    
    try:
        api_service = APIService()
        result = await api_service.review_approval(approval_id, "approved")
        
        if result:
            await callback.message.edit_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!")
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {str(e)}")


@router.callback_query(F.data.startswith("reject:"))
async def reject_request(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫—É"""
    approval_id = int(callback.data.split(":")[1])
    
    await callback.answer("‚è≥ –û—Ç–∫–ª–æ–Ω—è—é –∑–∞–ø—Ä–æ—Å...")
    
    try:
        api_service = APIService()
        result = await api_service.review_approval(approval_id, "rejected")
        
        if result:
            await callback.message.edit_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {str(e)}")
