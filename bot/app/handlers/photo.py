from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
import tempfile
import os
from app.services.api import APIService

router = Router()


@router.message(F.content_type == "photo")
async def handle_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ
    processing_msg = await message.answer("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file = await message.bot.get_file(photo.file_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file_path = tempfile.mktemp(suffix=".jpg")
        print(f"PHOTO HANDLER: –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤: {temp_file_path}")
        
        try:
            # –í Aiogram 3.x –∏—Å–ø–æ–ª—å–∑—É–µ–º bot.download_file
            await message.bot.download_file(file.file_path, temp_file_path)
            print(f"PHOTO HANDLER: –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {temp_file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if os.path.exists(temp_file_path) and os.path.getsize(temp_file_path) > 0:
                print(f"PHOTO HANDLER: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(temp_file_path)} –±–∞–π—Ç")
            else:
                print("PHOTO HANDLER: –û–®–ò–ë–ö–ê - —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π!")
                await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
                return
                
        except Exception as e:
            print(f"PHOTO HANDLER: –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞
        api_service = APIService()
        projects = await api_service.get_user_projects(message.from_user.id)
        
        if not projects:
            # –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
            text = "üì∏ <b>–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, —á—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞—á–µ."
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º WebApp –∫–Ω–æ–ø–∫—É –∏–∑-–∑–∞ HTTPS —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            # keyboard = InlineKeyboardMarkup(inline_keyboard=[
            #     [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app={"url": f"{api_service.WEBAPP_URL}"})]
            # ])
            
            await processing_msg.edit_text(text)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
        text = "üì∏ <b>–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Å —Ñ–æ—Ç–æ:"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫—ç—à
        import hashlib
        photo_hash = hashlib.md5(temp_file_path.encode()).hexdigest()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ hash -> path (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis –∏–ª–∏ –ë–î)
        if not hasattr(create_task_with_photo, 'photo_cache'):
            create_task_with_photo.photo_cache = {}
        create_task_with_photo.photo_cache[photo_hash] = temp_file_path
        
        keyboard_buttons = []
        for project in projects:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º hash –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
            callback_data = f"create_task_with_photo:{project['id']}:{photo_hash}"
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üìÇ {project['name']}", 
                    callback_data=callback_data
                )
            ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await processing_msg.edit_text(text, reply_markup=keyboard)
    
    except Exception as e:
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}")
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if 'temp_file_path' in locals() and os.path.exists(temp_file_path):
            os.unlink(temp_file_path)


@router.callback_query(F.data.startswith("create_task_with_photo:"))
async def create_task_with_photo(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ñ–æ—Ç–æ"""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º project_id –∏ photo_hash –∏–∑ callback_data
    parts = callback.data.split(":")
    project_id = int(parts[1])
    photo_hash = parts[2] if len(parts) > 2 else None
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –∏–∑ –∫—ç—à–∞
    photo_path = None
    if photo_hash and hasattr(create_task_with_photo, 'photo_cache'):
        photo_path = create_task_with_photo.photo_cache.get(photo_hash)
        print(f"Retrieved photo path: {photo_path}")
    
    await callback.answer("‚è≥ –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É —Å —Ñ–æ—Ç–æ...")
    
    try:
        api_service = APIService()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        projects = await api_service.get_user_projects(callback.from_user.id)
        project = next((p for p in projects if p["id"] == project_id), None)
        
        if not project:
            await callback.message.edit_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å —Ñ–æ—Ç–æ
        task_data = {
            "title": f"–ó–∞–¥–∞—á–∞ —Å —Ñ–æ—Ç–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ {project['name']}",
            "description": f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤ Telegram. –ü—Ä–æ–µ–∫—Ç: {project['name']}",
            "project_id": project_id,
            "priority": "medium",
            "deadline": None
        }
        
        created_task = await api_service.create_task(task_data, callback.from_user.id)
        
        if created_task:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞—á–∏
            photo_saved = False
            if photo_path and os.path.exists(photo_path):
                photo_saved = await api_service.save_photo_for_task(
                    callback.from_user.id, 
                    photo_path, 
                    created_task['id']
                )
                print(f"Photo saved: {photo_saved}")
            
            success_text = f"‚úÖ <b>–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å —Ñ–æ—Ç–æ!</b>\n\n"
            success_text += f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {created_task['title']}\n"
            success_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {created_task['description']}\n"
            success_text += f"üìÇ <b>–ü—Ä–æ–µ–∫—Ç:</b> {project['name']}\n"
            success_text += f"üì∏ <b>–§–æ—Ç–æ:</b> {'–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if photo_saved else '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å'}\n"
            success_text += f"‚ö° <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {created_task['priority']}\n"
            success_text += f"üÜî <b>ID –∑–∞–¥–∞—á–∏:</b> {created_task['id']}\n\n"
            success_text += f"–ó–∞–¥–∞—á–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!"
            
            await callback.message.edit_text(success_text)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –æ—á–∏—â–∞–µ–º –∫—ç—à
            if photo_path and os.path.exists(photo_path):
                os.unlink(photo_path)
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            if photo_hash and hasattr(create_task_with_photo, 'photo_cache'):
                create_task_with_photo.photo_cache.pop(photo_hash, None)
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
    
    except Exception as e:
        print(f"PHOTO CALLBACK ERROR: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}")


