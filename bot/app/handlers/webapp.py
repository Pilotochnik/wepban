from aiogram import Router
from aiogram.types import WebAppData, Message

router = Router()


@router.message(lambda message: message.web_app_data is not None)
async def handle_webapp_data(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    webapp_data: WebAppData = message.web_app_data
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–ª–∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    
    try:
        import json
        data = json.loads(webapp_data.data)
        
        if data.get("action") == "task_created":
            task_title = data.get("task_title", "–ó–∞–¥–∞—á–∞")
            await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        
        elif data.get("action") == "task_updated":
            task_title = data.get("task_title", "–ó–∞–¥–∞—á–∞")
            await message.answer(f"üìù –ó–∞–¥–∞—á–∞ '{task_title}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        
        else:
            await message.answer("üì± –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            
    except Exception as e:
        await message.answer("üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
