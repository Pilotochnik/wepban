import httpx
import json
from typing import Optional, Dict, Any
from app.core.config import settings
from app.models.user import User
from app.models.approval import ApprovalRequest, ActionType
import logging

logger = logging.getLogger(__name__)

class TelegramNotificationService:
    def __init__(self):
        self.bot_token = settings.BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    async def send_message(self, chat_id: int, text: str, reply_markup: Optional[Dict] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                payload = {
                    "chat_id": chat_id,
                    "text": text,
                    "parse_mode": "HTML"
                }
                
                if reply_markup:
                    payload["reply_markup"] = json.dumps(reply_markup)
                
                response = await client.post(
                    f"{self.base_url}/sendMessage",
                    json=payload
                )
                
                if response.status_code == 200:
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def notify_approval_request(self, creator: User, approval: ApprovalRequest) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ"""
        action_labels = {
            ActionType.CREATE_TASK: "—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            ActionType.UPDATE_TASK: "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏", 
            ActionType.DELETE_TASK: "—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            ActionType.CREATE_PROJECT: "—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            ActionType.UPDATE_PROJECT: "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            ActionType.DELETE_PROJECT: "—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            ActionType.ADD_USER_TO_PROJECT: "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç",
            ActionType.REMOVE_USER_FROM_PROJECT: "—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"
        }
        
        action_text = action_labels.get(approval.action_type, str(approval.action_type))
        
        message = f"""üîî <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ</b>

üë§ <b>–û—Ç:</b> {approval.requester.first_name} {approval.requester.last_name}
üìã <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action_text}
üìÖ <b>–í—Ä–µ–º—è:</b> {approval.created_at.strftime('%d.%m.%Y %H:%M')}

üí¨ <b>–î–µ—Ç–∞–ª–∏:</b>
{self._format_action_data(approval.action_data)}

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å."""
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
        reply_markup = {
            "inline_keyboard": [
                [
                    {
                        "text": "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                        "callback_data": f"approve:{approval.id}"
                    },
                    {
                        "text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                        "callback_data": f"reject:{approval.id}"
                    }
                ],
                [
                    {
                        "text": "üìã –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                        "web_app": {"url": f"{settings.WEBAPP_URL}/admin"}
                    }
                ]
            ]
        }
        
        return await self.send_message(creator.telegram_id, message, reply_markup)
    
    async def notify_approval_result(self, requester: User, approval: ApprovalRequest) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
        status_emoji = "‚úÖ" if approval.status.value == "approved" else "‚ùå"
        status_text = "–æ–¥–æ–±—Ä–µ–Ω–æ" if approval.status.value == "approved" else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        
        action_labels = {
            ActionType.CREATE_TASK: "—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            ActionType.UPDATE_TASK: "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            ActionType.DELETE_TASK: "—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏", 
            ActionType.CREATE_PROJECT: "—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            ActionType.UPDATE_PROJECT: "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            ActionType.DELETE_PROJECT: "—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            ActionType.ADD_USER_TO_PROJECT: "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç",
            ActionType.REMOVE_USER_FROM_PROJECT: "—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"
        }
        
        action_text = action_labels.get(approval.action_type, str(approval.action_type))
        
        message = f"""{status_emoji} <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ {status_text}</b>

üìã <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action_text}
üë§ <b>–†–∞—Å—Å–º–æ—Ç—Ä–µ–ª:</b> {approval.approver.first_name} {approval.approver.last_name}
üìÖ <b>–í—Ä–µ–º—è:</b> {approval.reviewed_at.strftime('%d.%m.%Y %H:%M') if approval.reviewed_at else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"""
        
        if approval.review_comment:
            message += f"\n\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{approval.review_comment}"
        
        return await self.send_message(requester.telegram_id, message)
    
    async def notify_user_added(self, user: User, added_by: User) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É"""
        message = f"""üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏!</b>

üë§ <b>–í–∞—Å –¥–æ–±–∞–≤–∏–ª:</b> {added_by.first_name} {added_by.last_name}
üîë <b>–í–∞—à–∞ —Ä–æ–ª—å:</b> {self._get_role_label(user.role)}
üì± <b>Telegram ID:</b> {user.telegram_id}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏!"""
        
        return await self.send_message(user.telegram_id, message)
    
    async def notify_user_status_changed(self, user: User, is_active: bool) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if is_active else "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        status_emoji = "‚úÖ" if is_active else "‚ùå"
        
        message = f"""{status_emoji} <b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω</b>

–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª {status_text}.

{f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã!" if is_active else "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."}"""
        
        return await self.send_message(user.telegram_id, message)
    
    def _format_action_data(self, action_data: Optional[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not action_data:
            return "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        
        try:
            data = json.loads(action_data)
            if isinstance(data, dict):
                lines = []
                for key, value in data.items():
                    if key == "title":
                        lines.append(f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {value}")
                    elif key == "description":
                        lines.append(f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {value[:100]}{'...' if len(str(value)) > 100 else ''}")
                    elif key == "priority":
                        lines.append(f"‚ö° <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {value}")
                    elif key == "deadline":
                        lines.append(f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {value}")
                    elif key == "project_name":
                        lines.append(f"üìÇ <b>–ü—Ä–æ–µ–∫—Ç:</b> {value}")
                    else:
                        lines.append(f"<b>{key}:</b> {value}")
                return "\n".join(lines)
            else:
                return str(data)
        except:
            return action_data
    
    def _get_role_label(self, role: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏"""
        labels = {
            "creator": "–°–æ–∑–¥–∞—Ç–µ–ª—å",
            "foreman": "–ü—Ä–æ—Ä–∞–±", 
            "worker": "–†–∞–±–æ—á–∏–π",
            "viewer": "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å"
        }
        return labels.get(role, role)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = TelegramNotificationService()
