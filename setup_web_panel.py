#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–ø–∞–Ω–µ–ª–∏
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É
"""

import asyncio
import httpx
import json

class WebPanelSetup:
    def __init__(self):
        self.base_url = "http://127.0.0.1:8000"
        self.telegram_id = 434532312
        
    async def authenticate(self) -> str:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{self.base_url}/api/v1/users/auth",
                json={"telegram_id": self.telegram_id}
            )
            response.raise_for_status()
            data = response.json()
            return data["access_token"]
    
    async def create_default_projects(self, token: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        
        default_projects = [
            {
                "name": "–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞",
                "description": "–ó–∞–¥–∞—á–∏ –ø–æ –¥–æ–º—É –∏ –±—ã—Ç—É",
                "color": "#10B981"
            },
            {
                "name": "–†–∞–±–æ—Ç–∞",
                "description": "–†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã",
                "color": "#3B82F6"
            },
            {
                "name": "–õ–∏—á–Ω—ã–µ –¥–µ–ª–∞",
                "description": "–õ–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø–ª–∞–Ω—ã",
                "color": "#F59E0B"
            },
            {
                "name": "–ó–¥–æ—Ä–æ–≤—å–µ",
                "description": "–ó–∞–¥–∞—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º",
                "color": "#EF4444"
            },
            {
                "name": "–û–±—É—á–µ–Ω–∏–µ",
                "description": "–ó–∞–¥–∞—á–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é –∏ —Ä–∞–∑–≤–∏—Ç–∏—é",
                "color": "#8B5CF6"
            }
        ]
        
        created_projects = []
        
        async with httpx.AsyncClient() as client:
            headers = {"Authorization": f"Bearer {token}"}
            
            for project_data in default_projects:
                try:
                    response = await client.post(
                        f"{self.base_url}/api/v1/projects/",
                        headers=headers,
                        json=project_data
                    )
                    response.raise_for_status()
                    project = response.json()
                    created_projects.append(project)
                    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {project['name']} (ID: {project['id']})")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ '{project_data['name']}': {e}")
        
        return created_projects
    
    async def create_sample_tasks(self, token: str, projects: list):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á"""
        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á...")
        
        sample_tasks = [
            {
                "title": "–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É",
                "description": "–ü–æ–º—ã—Ç—å –≤—Å—é –Ω–∞–∫–æ–ø–∏–≤—à—É—é—Å—è –ø–æ—Å—É–¥—É",
                "project_id": projects[0]["id"],  # –î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞
                "priority": "medium",
                "status": "todo"
            },
            {
                "title": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é",
                "description": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞",
                "project_id": projects[1]["id"],  # –†–∞–±–æ—Ç–∞
                "priority": "high",
                "status": "in_progress"
            },
            {
                "title": "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É",
                "description": "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç—É",
                "project_id": projects[3]["id"],  # –ó–¥–æ—Ä–æ–≤—å–µ
                "priority": "high",
                "status": "todo"
            },
            {
                "title": "–ò–∑—É—á–∏—Ç—å Python",
                "description": "–ü—Ä–æ–π—Ç–∏ –∫—É—Ä—Å –ø–æ Python –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é",
                "project_id": projects[4]["id"],  # –û–±—É—á–µ–Ω–∏–µ
                "priority": "medium",
                "status": "todo"
            },
            {
                "title": "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
                "description": "–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏",
                "project_id": projects[2]["id"],  # –õ–∏—á–Ω—ã–µ –¥–µ–ª–∞
                "priority": "low",
                "status": "done"
            }
        ]
        
        async with httpx.AsyncClient() as client:
            headers = {"Authorization": f"Bearer {token}"}
            
            for task_data in sample_tasks:
                try:
                    response = await client.post(
                        f"{self.base_url}/api/v1/tasks/",
                        headers=headers,
                        json=task_data
                    )
                    response.raise_for_status()
                    task = response.json()
                    project_name = next(p["name"] for p in projects if p["id"] == task_data["project_id"])
                    print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: '{task['title']}' ‚Üí –ü—Ä–æ–µ–∫—Ç '{project_name}'")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ '{task_data['title']}': {e}")
    
    async def get_system_stats(self, token: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
        
        async with httpx.AsyncClient() as client:
            headers = {"Authorization": f"Bearer {token}"}
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
            try:
                response = await client.get(f"{self.base_url}/api/v1/projects/", headers=headers)
                response.raise_for_status()
                projects = response.json()
                print(f"üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
                
                for project in projects:
                    print(f"   - {project['name']} (ID: {project['id']})")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
    
    async def setup(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø–∞–Ω–µ–ª–∏ Project Manager")
        print("=" * 50)
        
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            print("üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
            token = await self.authenticate()
            print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
            projects = await self.create_default_projects(token)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á
            await self.create_sample_tasks(token, projects)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            await self.get_system_stats(token)
            
            print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ü—Ä–æ–µ–∫—Ç—ã'")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∑–∞–¥–∞—á–∏")
            print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
            print("5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ test_bot.py –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è bot'–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            import traceback
            traceback.print_exc()

async def main():
    setup = WebPanelSetup()
    await setup.setup()

if __name__ == "__main__":
    asyncio.run(main())
