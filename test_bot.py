#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram Bot
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import asyncio
import httpx
import json
from typing import Dict, List

class BotTester:
    def __init__(self):
        self.base_url = "http://127.0.0.1:8000"
        self.telegram_id = 434532312
        
    async def authenticate(self) -> str:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{self.base_url}/api/v1/users/auth",
                json={"telegram_id": self.telegram_id}
            )
            response.raise_for_status()
            data = response.json()
            return data["access_token"]
    
    async def get_projects(self, token: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with httpx.AsyncClient() as client:
            headers = {"Authorization": f"Bearer {token}"}
            response = await client.get(
                f"{self.base_url}/api/v1/projects/",
                headers=headers
            )
            response.raise_for_status()
            return response.json()
    
    async def create_project(self, token: str, name: str, description: str = "", color: str = "#3B82F6") -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        async with httpx.AsyncClient() as client:
            headers = {"Authorization": f"Bearer {token}"}
            response = await client.post(
                f"{self.base_url}/api/v1/projects/",
                headers=headers,
                json={
                    "name": name,
                    "description": description,
                    "color": color
                }
            )
            response.raise_for_status()
            return response.json()
    
    async def create_task(self, token: str, task_data: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        async with httpx.AsyncClient() as client:
            headers = {"Authorization": f"Bearer {token}"}
            response = await client.post(
                f"{self.base_url}/api/v1/tasks/",
                headers=headers,
                json=task_data
            )
            response.raise_for_status()
            return response.json()
    
    async def test_text_tasks(self, token: str, projects: List[Dict]):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á:")
        
        test_messages = [
            "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ",
            "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É: –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
            "–∑–∞–¥–∞—á–∞: –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é",
            "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: –ø–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É",
            "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É"
        ]
        
        for message in test_messages:
            print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: '{message}'")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º AI –∞–Ω–∞–ª–∏–∑
            task_data = {
                "title": message.split(":")[-1].strip().title(),
                "description": f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}",
                "project_id": projects[0]["id"] if projects else None,
                "priority": "medium",
                "deadline": None
            }
            
            try:
                created_task = await self.create_task(token, task_data)
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {created_task['title']} (ID: {created_task['id']})")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
    
    async def test_voice_tasks(self, token: str, projects: List[Dict]):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–¥–∞—á:")
        
        voice_scenarios = [
            {
                "transcribed_text": "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –∫–æ—Ä–º –¥–ª—è –∫–æ—Ç–∞",
                "expected_task": "–ö—É–ø–∏—Ç—å –∫–æ—Ä–º –¥–ª—è –∫–æ—Ç–∞"
            },
            {
                "transcribed_text": "–î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É —É–±—Ä–∞—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ",
                "expected_task": "–£–±—Ä–∞—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ"
            },
            {
                "transcribed_text": "–ó–∞–¥–∞—á–∞ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å—ã",
                "expected_task": "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å—ã"
            }
        ]
        
        for scenario in voice_scenarios:
            print(f"\nüéôÔ∏è –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ: '{scenario['transcribed_text']}'")
            
            task_data = {
                "title": scenario["expected_task"],
                "description": f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {scenario['transcribed_text']}",
                "project_id": projects[1]["id"] if len(projects) > 1 else None,
                "priority": "medium",
                "deadline": None
            }
            
            try:
                created_task = await self.create_task(token, task_data)
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {created_task['title']} (ID: {created_task['id']})")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
    
    async def test_project_logic(self, token: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"""
        print("\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
        projects_data = [
            {"name": "–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞", "description": "–ó–∞–¥–∞—á–∏ –ø–æ –¥–æ–º—É", "color": "#10B981"},
            {"name": "–†–∞–±–æ—Ç–∞", "description": "–†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏", "color": "#3B82F6"},
            {"name": "–õ–∏—á–Ω—ã–µ –¥–µ–ª–∞", "description": "–õ–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏", "color": "#F59E0B"}
        ]
        
        created_projects = []
        for project_data in projects_data:
            try:
                project = await self.create_project(token, **project_data)
                created_projects.append(project)
                print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {project['name']} (ID: {project['id']})")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        
        return created_projects
    
    async def test_smart_project_assignment(self, token: str, projects: List[Dict]):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"""
        print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á:")
        
        # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
        project_keywords = {
            "–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞": ["–¥–æ–º", "—É–±—Ä–∞—Ç—å", "–ø–æ–º—ã—Ç—å", "–ø–æ—á–∏—Å—Ç–∏—Ç—å", "–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å", "–ø–æ—Å—É–¥–∞", "–ø–æ–ª—ã"],
            "–†–∞–±–æ—Ç–∞": ["—Ä–∞–±–æ—Ç–∞", "–∫–ª–∏–µ–Ω—Ç", "–ø—Ä–æ–µ–∫—Ç", "–≤—Å—Ç—Ä–µ—á–∞", "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "–æ—Ç—á–µ—Ç", "–∑–≤–æ–Ω–æ–∫"],
            "–õ–∏—á–Ω—ã–µ –¥–µ–ª–∞": ["–≤—Ä–∞—á", "–∫—É—Ä—Å—ã", "—Å–ø–æ—Ä—Ç", "–º–∞–≥–∞–∑–∏–Ω", "–ø–æ–∫—É–ø–∫–∞", "–ª–∏—á–Ω–æ–µ"]
        }
        
        test_tasks = [
            "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: –ø–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É",
            "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É: –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
            "–∑–∞–¥–∞—á–∞: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É",
            "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: —É–±—Ä–∞—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ",
            "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É: –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"
        ]
        
        for task_text in test_tasks:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–µ–∫—Ç
            assigned_project = None
            task_content = task_text.lower()
            
            for project_name, keywords in project_keywords.items():
                if any(keyword in task_content for keyword in keywords):
                    assigned_project = next(
                        (p for p in projects if p["name"] == project_name), 
                        None
                    )
                    break
            
            if not assigned_project:
                assigned_project = projects[0]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç
            
            task_data = {
                "title": task_text.split(":")[-1].strip().title(),
                "description": f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑: {task_text}",
                "project_id": assigned_project["id"],
                "priority": "medium",
                "deadline": None
            }
            
            try:
                created_task = await self.create_task(token, task_data)
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ '{created_task['title']}' ‚Üí –ü—Ä–æ–µ–∫—Ç '{assigned_project['name']}'")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram Bot")
        print("=" * 50)
        
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            print("üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
            token = await self.authenticate()
            print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤...")
            existing_projects = await self.get_projects(token)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(existing_projects)}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            print("\nüèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...")
            test_projects = await self.test_project_logic(token)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            all_projects = existing_projects + test_projects
            print(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(all_projects)}")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
            await self.test_text_tasks(token, all_projects)
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–¥–∞—á
            await self.test_voice_tasks(token, all_projects)
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            await self.test_smart_project_assignment(token, all_projects)
            
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {e}")
            import traceback
            traceback.print_exc()

async def main():
    tester = BotTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())
