import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { apiService } from '@/lib/api'

export function TestPage() {
  const [telegramId, setTelegramId] = useState('434532312')
  const [authToken, setAuthToken] = useState('')
  const [testResults, setTestResults] = useState<string[]>([])
  const [isLoading, setIsLoading] = useState(false)

  const addResult = (message: string) => {
    setTestResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`])
  }

  const testAuth = async () => {
    setIsLoading(true)
    try {
      addResult(`–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è telegram_id: ${telegramId}`)
      const response = await apiService.auth(parseInt(telegramId))
      setAuthToken(response.data.access_token)
      addResult(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω`)
      addResult(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${response.data.user.first_name} ${response.data.user.last_name}`)
    } catch (error: any) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.response?.data?.detail || error.message}`)
    }
    setIsLoading(false)
  }

  const testProjects = async () => {
    if (!authToken) {
      addResult('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é')
      return
    }

    setIsLoading(true)
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
      localStorage.setItem('auth_token', authToken)
      addResult('üîë –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage')

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
      addResult('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...')
      const projectsResponse = await apiService.getProjects()
      addResult(`‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: ${projectsResponse.data.length} —à—Ç—É–∫`)

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      addResult('‚ûï –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç...')
      const newProject = await apiService.createProject({
        name: `–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ${Date.now()}`,
        description: '–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
        color: '#3B82F6'
      })
      addResult(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${newProject.data.name} (ID: ${newProject.data.id})`)

    } catch (error: any) {
      addResult(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.detail || error.message}`)
      if (error.response?.status === 401) {
        addResult('üîë –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
      }
    }
    setIsLoading(false)
  }

  const clearResults = () => {
    setTestResults([])
    setAuthToken('')
    localStorage.removeItem('auth_token')
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-gray-900">–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API</h1>
        <p className="text-gray-600 mt-2">
          –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <Card>
          <CardHeader>
            <CardTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏</CardTitle>
            <CardDescription>
              –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="telegramId">Telegram ID</Label>
              <Input
                id="telegramId"
                value={telegramId}
                onChange={(e) => setTelegramId(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ Telegram ID"
              />
            </div>

            <div className="space-y-2">
              <Button 
                onClick={testAuth} 
                disabled={isLoading}
                className="w-full"
              >
                üîë –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              </Button>
              
              <Button 
                onClick={testProjects} 
                disabled={isLoading || !authToken}
                variant="outline"
                className="w-full"
              >
                üìã –¢–µ—Å—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤
              </Button>
              
              <Button 
                onClick={clearResults} 
                variant="destructive"
                className="w-full"
              >
                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
              </Button>
            </div>

            {authToken && (
              <div className="p-3 bg-green-50 border border-green-200 rounded">
                <p className="text-sm text-green-800">
                  <strong>–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:</strong><br />
                  <code className="text-xs break-all">{authToken.substring(0, 50)}...</code>
                </p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
        <Card>
          <CardHeader>
            <CardTitle>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</CardTitle>
            <CardDescription>
              –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-96 overflow-y-auto bg-gray-50 p-4 rounded border">
              {testResults.length === 0 ? (
                <p className="text-gray-500 text-center">
                  –ù–∞–∂–º–∏—Ç–µ "–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" –¥–ª—è –Ω–∞—á–∞–ª–∞
                </p>
              ) : (
                <div className="space-y-1">
                  {testResults.map((result, index) => (
                    <div 
                      key={index}
                      className={`text-sm p-2 rounded ${
                        result.includes('‚úÖ') ? 'bg-green-100 text-green-800' :
                        result.includes('‚ùå') ? 'bg-red-100 text-red-800' :
                        result.includes('üîë') ? 'bg-blue-100 text-blue-800' :
                        'bg-gray-100 text-gray-800'
                      }`}
                    >
                      {result}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
