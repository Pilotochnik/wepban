#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ
–ó–∞–ø—É—Å–∫–∞—Ç—å: python test_access_quick.py
"""

import asyncio
import httpx
import json

async def test_access():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞"""
    print("üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –°–ò–°–¢–ï–ú–ï")
    print("=" * 50)
    
    backend_url = "http://127.0.0.1:8000"
    creator_id = 434532312
    
    async with httpx.AsyncClient(timeout=10.0) as client:
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend
            print("1. üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend...")
            health_response = await client.get(f"{backend_url}/health")
            if health_response.status_code == 200:
                print("   ‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"   ‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_response.status_code}")
                return False
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
            print("2. üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è...")
            access_response = await client.get(f"{backend_url}/api/v1/users/check-access/{creator_id}")
            
            if access_response.status_code == 200:
                user_data = access_response.json()
                print(f"   ‚úÖ –°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user_data.get('first_name')} {user_data.get('last_name')}")
                print(f"   üìã –†–æ–ª—å: {user_data.get('role')}")
                print(f"   üü¢ –ê–∫—Ç–∏–≤–µ–Ω: {user_data.get('is_active')}")
                
                if not user_data.get('is_active'):
                    print("   ‚ö†Ô∏è –°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python backend/init_creator.py")
                    return False
            else:
                print(f"   ‚ùå –°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {access_response.status_code}")
                print("   ‚ö†Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python backend/init_creator.py")
                return False
            
            # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            print("3. üîê –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            auth_response = await client.post(
                f"{backend_url}/api/v1/users/auth",
                json={"telegram_id": creator_id}
            )
            
            if auth_response.status_code == 200:
                auth_data = auth_response.json()
                token = auth_data.get("access_token")
                print("   ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                print(f"   üé´ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
                
                # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å —Ç–æ–∫–µ–Ω–æ–º
                print("4. üìä –¢–µ—Å—Ç API —Å —Ç–æ–∫–µ–Ω–æ–º...")
                headers = {"Authorization": f"Bearer {token}"}
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
                projects_response = await client.get(
                    f"{backend_url}/api/v1/projects/",
                    headers=headers
                )
                
                if projects_response.status_code == 200:
                    projects = projects_response.json()
                    print(f"   ‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(projects)} —à—Ç.")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_response.status_code}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
                tasks_response = await client.get(
                    f"{backend_url}/api/v1/tasks/",
                    headers=headers
                )
                
                if tasks_response.status_code == 200:
                    tasks = tasks_response.json()
                    print(f"   ‚úÖ –ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(tasks)} —à—Ç.")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {tasks_response.status_code}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω API
                print("5. üëë –¢–µ—Å—Ç –∞–¥–º–∏–Ω API...")
                admin_stats_response = await client.get(
                    f"{backend_url}/api/v1/admin/stats",
                    headers=headers
                )
                
                if admin_stats_response.status_code == 200:
                    stats = admin_stats_response.json()
                    print("   ‚úÖ –ê–¥–º–∏–Ω API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    print(f"   üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}")
                    print(f"   üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_users', 0)}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω API: {admin_stats_response.status_code}")
                
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_response.status_code}")
                print(f"   üìÑ –û—Ç–≤–µ—Ç: {auth_response.text}")
                return False
            
            print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: cd bot && python main.py")
            print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É —Å ID 434532312")
            print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: cd frontend && npm start")
            print("4. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
            
            return True
            
        except httpx.ConnectError:
            print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ backend!")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω:")
            print("   cd backend && python main.py")
            return False
            
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await test_access()
    
    if not success:
        print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: cd backend && python main.py")
        print("2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è: cd backend && python init_creator.py")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª—ã")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend")

if __name__ == "__main__":
    asyncio.run(main())
