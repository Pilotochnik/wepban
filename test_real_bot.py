#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Telegram Bot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ bot –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏
"""

import asyncio
import httpx
import json
import time
from typing import Dict, List

class RealBotTester:
    def __init__(self):
        self.base_url = "http://127.0.0.1:8000"
        self.telegram_id = 434532312
        self.token = None
        
    async def authenticate(self) -> str:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{self.base_url}/api/v1/users/auth",
                json={"telegram_id": self.telegram_id}
            )
            response.raise_for_status()
            data = response.json()
            self.token = data["access_token"]
            return self.token
    
    async def get_projects(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with httpx.AsyncClient() as client:
            headers = {"Authorization": f"Bearer {self.token}"}
            response = await client.get(
                f"{self.base_url}/api/v1/projects/",
                headers=headers
            )
            response.raise_for_status()
            return response.json()
    
    async def get_tasks(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with httpx.AsyncClient() as client:
            headers = {"Authorization": f"Bearer {self.token}"}
            response = await client.get(
                f"{self.base_url}/api/v1/tasks/",
                headers=headers
            )
            response.raise_for_status()
            return response.json()
    
    async def count_tasks_before(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á –¥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        tasks = await self.get_tasks()
        return len(tasks)
    
    async def wait_for_new_task(self, initial_count: int, timeout: int = 30) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (—Ç–∞–π–º–∞—É—Ç: {timeout}—Å)...")
        
        for i in range(timeout):
            await asyncio.sleep(1)
            try:
                current_count = len(await self.get_tasks())
                if current_count > initial_count:
                    print(f"‚úÖ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –ë—ã–ª–æ: {initial_count}, —Å—Ç–∞–ª–æ: {current_count}")
                    return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á: {e}")
            
            if i % 5 == 0 and i > 0:
                print(f"‚è≥ –ü—Ä–æ—à–ª–æ {i} —Å–µ–∫—É–Ω–¥...")
        
        print(f"‚ùå –¢–∞–π–º–∞—É—Ç! –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
        return False
    
    async def test_bot_commands(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ bot'–∞"""
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ bot'–∞:")
        print("=" * 50)
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        print("üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
        await self.authenticate()
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:")
        projects = await self.get_projects()
        tasks = await self.get_tasks()
        print(f"üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
        print(f"üìù –ó–∞–¥–∞—á: {len(tasks)}")
        
        if projects:
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
            for project in projects:
                print(f"   - {project['name']} (ID: {project['id']})")
        
        print("\nüß™ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("=" * 50)
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ bot'–∞")
        print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        print("3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        print("   '—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ'")
        print("4. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ bot'–∞")
        print("5. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á –¥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        initial_task_count = await self.count_tasks_before()
        print(f"\nüìä –ó–∞–¥–∞—á –¥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {initial_task_count}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è bot'—É...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        new_task_appeared = await self.wait_for_new_task(initial_task_count, 30)
        
        if new_task_appeared:
            print("\nüéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
            print("‚úÖ Bot —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞—á—É")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            final_tasks = await self.get_tasks()
            new_tasks = final_tasks[initial_task_count:]
            
            print(f"\nüìù –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
            for task in new_tasks:
                project_name = "–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞"
                if task.get("project_id"):
                    project = next((p for p in projects if p["id"] == task["project_id"]), None)
                    if project:
                        project_name = project["name"]
                
                print(f"   - {task['title']} ‚Üí {project_name}")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª!")
            print("‚ùå Bot –Ω–µ —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞—á—É")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ bot'–∞
            print("\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            print("1. Bot –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            print("2. Bot –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            print("3. –û—à–∏–±–∫–∞ –≤ AI —Å–µ—Ä–≤–∏—Å–µ")
            print("4. –ü—Ä–æ–±–ª–µ–º–∞ —Å API")
    
    async def test_ai_service(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø—Ä—è–º—É—é"""
        print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞:")
        print("=" * 50)
        
        async with httpx.AsyncClient() as client:
            try:
                # –¢–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
                test_text = "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É: –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"
                projects = await self.get_projects()
                
                response = await client.post(
                    f"{self.base_url}/api/v1/ai/create-task-from-text/",
                    json={
                        "text": test_text,
                        "user_projects": projects
                    }
                )
                
                if response.status_code == 200:
                    ai_result = response.json()
                    print(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω:")
                    print(f"   –¢–µ–∫—Å—Ç: {test_text}")
                    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {ai_result}")
                else:
                    print(f"‚ùå AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞: {e}")

async def main():
    tester = RealBotTester()
    
    print("üöÄ –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Telegram Bot")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞
        await tester.test_ai_service()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bot'–∞
        await tester.test_bot_commands()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
