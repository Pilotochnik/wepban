#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –∏ –æ–¥–æ–±—Ä–µ–Ω–∏–π Project Manager Bot
"""

import asyncio
import httpx
import json
import sys
from datetime import datetime

class RoleSystemTester:
    def __init__(self):
        self.base_url = "http://127.0.0.1:8000"
        self.creator_id = 434532312
        self.test_results = []

    def log_test(self, test_name: str, success: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        timestamp = datetime.now().strftime("%H:%M:%S")
        result = f"[{timestamp}] {status} {test_name}"
        if details:
            result += f" - {details}"
        print(result)
        self.test_results.append({
            'test': test_name,
            'success': success,
            'details': details,
            'timestamp': timestamp
        })
        return success

    async def test_creator_access(self) -> bool:
        """–¢–µ—Å—Ç 1: –î–æ—Å—Ç—É–ø —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/api/v1/admin/users",
                    headers={"X-User-ID": str(self.creator_id)}
                )
                success = response.status_code == 200
                return self.log_test("Creator Admin Access", success, f"Status: {response.status_code}")
        except Exception as e:
            return self.log_test("Creator Admin Access", False, str(e))

    async def test_user_creation_by_creator(self) -> bool:
        """–¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/api/v1/admin/users",
                    json={
                        "telegram_id": 999999999,
                        "username": "test_worker",
                        "role": "worker"
                    },
                    headers={"X-User-ID": str(self.creator_id)}
                )
                success = response.status_code == 200
                return self.log_test("User Creation by Creator", success, f"Status: {response.status_code}")
        except Exception as e:
            return self.log_test("User Creation by Creator", False, str(e))

    async def test_approval_system(self) -> bool:
        """–¢–µ—Å—Ç 3: –°–∏—Å—Ç–µ–º–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–π"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/api/v1/admin/approvals",
                    headers={"X-User-ID": str(self.creator_id)}
                )
                success = response.status_code == 200
                return self.log_test("Approval System", success, f"Status: {response.status_code}")
        except Exception as e:
            return self.log_test("Approval System", False, str(e))

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π"""
        print("üîê –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π Project Manager Bot")
        print("=" * 60)
        
        await self.test_creator_access()
        await self.test_user_creation_by_creator()
        await self.test_approval_system()
        
        # –ò—Ç–æ–≥–∏
        print("=" * 60)
        passed = sum(1 for result in self.test_results if result['success'])
        total = len(self.test_results)
        success_rate = (passed / total) * 100 if total > 0 else 0
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –†–û–õ–ï–ô:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} ({success_rate:.1f}%)")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
        
        return success_rate >= 90

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = RoleSystemTester()
    success = await tester.run_all_tests()
    
    if not success:
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ —Ä–æ–ª–µ–π:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å (ID: 434532312) —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        sys.exit(1)
    else:
        print("\nüöÄ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –ø—Ä–æ–π–¥–µ–Ω—ã!")
        sys.exit(0)

if __name__ == "__main__":
    asyncio.run(main())